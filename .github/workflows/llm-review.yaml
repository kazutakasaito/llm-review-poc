name: LLM Review

on:
  pull_request:
    types: [opened, edited, synchronize]
    paths: # 特定のパス配下の .md ファイルの変更時のみトリガー
      - 'pbis/**/*.md' # 例: 'pbis' ディレクトリ以下の全ての .md ファイル
      - 'user_stories/**/*.md' # 他のパスも追加可能

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write # PRにコメントを書き込むために必要
      contents: read # actions/checkout でコードをチェックアウトするために必要

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # ベースブランチとの差分を取得するために全履歴をフェッチ

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # requirements.txt に langchain-openai, langgraph, openai などを記載
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # 個別にインストールする場合
          # pip install langchain-openai langgraph openai

      - name: Get changed markdown files
        id: changed_files
        run: |
          # PRのベースブランチとヘッドブランチの間の差分ファイルを取得
          # 対象は on.pull_request.paths で指定したパターンに合致する .md ファイル
          # (より厳密には、ここで再度フィルタリングしても良い)
          files=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- '*.md' | grep -E '^(pbis/|user_stories/).*\.md$' || true)
          if [ -z "$files" ]; then
            echo "No markdown files changed in specified paths."
            echo "changed_files_list=''" >> $GITHUB_OUTPUT
          else
            # ファイルパスをスペース区切りでリスト化
            echo "changed_files_list<<EOF" >> $GITHUB_OUTPUT
            echo "$files" | tr '\n' ' ' >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "Changed markdown files: $files"
          fi

      - name: Run multi-persona review if files changed
        if: steps.changed_files.outputs.changed_files_list != ''
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "Running review for files: ${{ steps.changed_files.outputs.changed_files_list }}"
          # スペース区切りのファイルリストを引数として渡す
          # xargs を使って、ファイルリストが空でない場合のみ実行する
          # shellcheck disable=SC2086
          echo ${{ steps.changed_files.outputs.changed_files_list }} | xargs python llm_review/reviewer_agents.py > review_results.json
          echo "Review results generated in review_results.json"
          cat review_results.json # デバッグ用に内容を出力

      - name: Format review results to Markdown
        id: format_review
        if: steps.changed_files.outputs.changed_files_list != ''
        shell: python
        run: |
          import json
          import os

          output_path = os.getenv('GITHUB_OUTPUT')
          markdown_output = ""
          try:
            with open('review_results.json', 'r', encoding='utf-8') as f:
              results = json.load(f)
          except FileNotFoundError:
            print("review_results.json not found.")
            results = []
          except json.JSONDecodeError:
            print("Failed to decode review_results.json.")
            results = []

          if not results:
            markdown_output = "LLMによるレビュー対象のPBIファイルが見つからなかったか、レビュー結果がありませんでした。"
          else:
            markdown_output += "📝 **LLMによるPBIレビュー結果**\n\n"
            for file_result in results:
              file_path = file_result.get("file_path", "N/A")
              error = file_result.get("error")
              review = file_result.get("review", {})

              markdown_output += f"### 📄 ファイル: `{file_path}`\n"
              if error:
                markdown_output += f"**エラー:** {error}\n\n"
                continue
              if not review:
                markdown_output += "指摘事項はありませんでした。\n\n"
                continue

              for persona, comments in review.items():
                if comments: # コメントがあるペルソナのみ表示
                  markdown_output += f"#### 🧑‍💻 ペルソナ: {persona.capitalize()}\n"
                  if not comments: # JSONパース失敗などで空の場合
                      markdown_output += "- 指摘事項の取得に失敗しました。\n"
                      continue
                  for comment_item in comments:
                    severity = comment_item.get('severity', 'N/A').upper()
                    comment_text = comment_item.get('comment', 'コメントなし')
                    line = comment_item.get('line')
                    
                    line_info = f" (行: {line})" if line is not None else ""
                    
                    emoji = "⚠️" # Default
                    if severity == 'HIGH':
                        emoji = "🔴"
                    elif severity == 'MEDIUM':
                        emoji = "🟡"
                    elif severity == 'LOW':
                        emoji = "🟢"
                    elif severity == 'ERROR':
                        emoji = "❗"

                    markdown_output += f"- **{emoji} [{severity}]{line_info}:** {comment_text}\n"
                  markdown_output += "\n"
            if not any(file_result.get("review") for file_result in results if not file_result.get("error")):
                 markdown_output += "\n全体として、具体的な指摘事項はありませんでした。\n"


          # GITHUB_OUTPUT に書き込む (長すぎる場合は注意)
          # Markdown をエスケープする必要がある場合がある
          # シンプルにするため、ここでは直接代入
          with open(output_path, 'a') as f:
              f.write(f"markdown_comment<<EOF\n{markdown_output}\nEOF\n")
          print("Markdown comment prepared.")
          # print(f"Formatted Markdown:\n{markdown_output}") # For debugging

      - name: Post comment to PR
        if: steps.changed_files.outputs.changed_files_list != '' && steps.format_review.outputs.markdown_comment != ''
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          # review_results.json の代わりに整形したMarkdownを渡す
          # header: llm-review # コメントに一意のヘッダーを付与して更新できるようにする
          # message: ${{ steps.format_review.outputs.markdown_comment }}
          # GITHUB_TOKEN はデフォルトで利用可能
          # path の代わりに message を使用
          header: llm-review-results # 更新用の一意なID
          message: |
            ${{ steps.format_review.outputs.markdown_comment }}

      - name: No files to review
        if: steps.changed_files.outputs.changed_files_list == ''
        run: echo "No markdown files to review in specified paths. Skipping LLM review."

